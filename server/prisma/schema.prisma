generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cart {
  amount     Int?
  unit_price Float?   @db.Real
  cart_id    Int      @id @default(autoincrement())
  lot_id     Int?
  order_id   Int?
  product_id Int?
  lot        lot?     @relation(fields: [lot_id], references: [lot_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_lot_fk")
  order      order?   @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_order_fk")
  product    product? @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_product_fk")
}

model cost {
  cost             Float?    @db.Real
  type_of_category String?   @db.VarChar
  amount           Int?
  cost_id          Int       @id @default(autoincrement())
  date_added       DateTime? @db.Date
  product_id       Int?
  store_id         Int?
  product          product?  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "cost_product_fk")
  store            store?    @relation(fields: [store_id], references: [store_id], onDelete: NoAction, onUpdate: NoAction, map: "cost_store_fk")
  order            order[]
  revenue          revenue[]
}

model customer {
  citizen_id   String?   @db.VarChar
  name         String?   @db.VarChar
  phone_number String?   @db.VarChar
  birthday     DateTime? @db.Date
  gender       String?   @db.VarChar
  customer_id  Int       @id @default(autoincrement())
  point        Int?
  order        order[]
}

model document {
  description       String?             @db.VarChar
  document_id       Int                 @id @default(autoincrement())
  employee_id       Int?
  issued_date       DateTime?           @db.Date
  employee          employee?           @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "document_employee_fk")
  purchase_document purchase_document[]
}

model employee {
  tax_id            String?             @db.VarChar(30)
  email             String              @unique @db.VarChar(30)
  password          String?             @db.VarChar(255)
  phonenumber       String?             @db.VarChar(11)
  gender            String?             @db.VarChar(10)
  birthdate         DateTime?           @db.Date
  address           String?             @db.VarChar(255)
  additional_info   String?             @db.VarChar(255)
  country           String?             @db.VarChar(30)
  employee_id       Int                 @id @default(autoincrement())
  firstname         String?             @db.VarChar(30)
  lastname          String?             @db.VarChar(30)
  province          String?             @db.VarChar(255)
  role_id           Int?
  storecode         String?             @db.VarChar
  zipcode           String?             @db.VarChar(10)
  profile_image     String?             @db.VarChar
  document          document[]
  role              role?               @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_role_fk")
  is_pharmacist     is_pharmacist[]
  order             order[]
  pharmacist        pharmacist[]
  purchase_document purchase_document[]
}

model forecasted {
  start_date                DateTime?            @db.Date
  end_date                  DateTime?            @db.Date
  confidence_interval_lower Decimal?             @db.Decimal(12, 2)
  confidence_interval_upper Decimal?             @db.Decimal(12, 2)
  created_at                DateTime?            @db.Date
  forecasted_id             Int                  @id @default(autoincrement())
  model_id                  Int?
  model                     model?               @relation(fields: [model_id], references: [model_id], onDelete: NoAction, onUpdate: NoAction, map: "forecasted_model_fk")
  forecasted_product        forecasted_product[]
}

model forecasted_product {
  cost                  Float?       @db.Real
  predicted_revenue     Float?       @db.Real
  forecasted_id         Int?
  forecasted_product_id Int          @id @default(autoincrement())
  product_id            Int?
  time_id               Int?
  forecasted            forecasted?  @relation(fields: [forecasted_id], references: [forecasted_id], onDelete: NoAction, onUpdate: NoAction, map: "forecasted_product_forecasted_fk")
  product               product?     @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "forecasted_product_product_fk")
  time_period           time_period? @relation(fields: [time_id], references: [time_period_id], onDelete: NoAction, onUpdate: NoAction, map: "forecasted_product_time_period_fk")
}

model is_allowed {
  is_allowed    Boolean?
  is_allowed_id Int         @id @default(autoincrement())
  permission_id Int?
  role_id       Int?
  permission    permission? @relation(fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction, map: "isallowed_permission_fk")
  role          role?       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "isallowed_role_fk")
}

model is_pharmacist {
  is_pharmacist    Boolean?
  employee_id      Int?
  is_pharmacist_id Int         @id @default(autoincrement())
  pharmacist_id    Int?
  role_id          Int?
  employee         employee?   @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "is_pharmacist_employee_fk")
  pharmacist       pharmacist? @relation(fields: [pharmacist_id], references: [pharmacist_id], onDelete: NoAction, onUpdate: NoAction, map: "is_pharmacist_pharmacist_fk")
  role             role?       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "is_pharmacist_role_fk")
}

model lot {
  amount                     Int?
  added_date                 DateTime?  @db.Date
  expired_date               DateTime?  @db.Date
  cost                       Float?     @db.Real
  lot_id                     Int        @id @default(autoincrement())
  lot_no                     String?    @db.VarChar(20)
  product_id                 Int?
  stock_id                   Int?
  cart                       cart[]
  product                    product?   @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "lot_product_fk")
  stock_lot_stock_idTostock  stock?     @relation("lot_stock_idTostock", fields: [stock_id], references: [stock_id], onDelete: NoAction, onUpdate: NoAction, map: "lot_stock_fk")
  quantity                   quantity[]
  stock_stock_lot_id_fkTolot stock[]    @relation("stock_lot_id_fkTolot")
}

model metrics {
  metric_name String? @db.VarChar
  metrics_id  Int     @id @default(autoincrement())
  trend       trend[]
}

model model {
  name       String?      @db.VarChar
  model_id   Int          @id @default(autoincrement())
  forecasted forecasted[]
}

model order {
  time              DateTime?       @db.Date
  date              DateTime?       @db.Date
  total_amount      Int?
  total_price       Float?          @db.Real
  vat               Float?          @db.Real
  cost_id           Int?
  customer_id       Int?
  employee_id       Int?
  order_id          Int             @id @default(autoincrement())
  revenue_source_id Int?
  status            String?         @default("PENDING") @db.VarChar(50)
  carts             cart[]
  cost              cost?           @relation(fields: [cost_id], references: [cost_id], onDelete: NoAction, onUpdate: NoAction, map: "order_cost_fk")
  customer          customer?       @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction, map: "order_customer_fk")
  employee          employee?       @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "order_employee_fk")
  revenue_source    revenue_source? @relation(fields: [revenue_source_id], references: [revenue_source_id], onDelete: NoAction, onUpdate: NoAction, map: "order_revenue_source_fk")
  revenue           revenue[]
}

model permission {
  permission    String?      @db.VarChar(255)
  permission_id Int          @id @default(autoincrement())
  is_allowed    is_allowed[]
}

model pharmacist {
  license       Bytes?
  signature     Bytes?
  employee_id   Int?
  pharmacist_id Int             @id @default(autoincrement())
  is_pharmacist is_pharmacist[]
  employee      employee?       @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "pharmacist_employee_fk")
}

model product {
  product_name       String?              @db.VarChar(255)
  brand              String?              @db.VarChar
  barcode            String?              @db.VarChar(250)
  friendlyid         String?              @db.VarChar(250)
  image              String?              @db.VarChar(255)
  iscontrolled       Boolean?
  product_id         Int                  @id @default(autoincrement())
  producttype        String?              @db.VarChar(255)
  unit               String?              @db.VarChar(255)
  cart               cart[]
  cost               cost[]
  forecasted_product forecasted_product[]
  lot                lot[]
  revenue            revenue[]
  stock              stock[]
  trend              trend[]
}

model purchase_document {
  description          String?   @db.VarChar
  issue_date           DateTime? @db.Date
  document_id          Int?
  employee_id          Int?
  pdf_file             Bytes?
  pdf_filename         String?   @db.VarChar(100)
  pdf_mime             String?   @db.VarChar(100)
  purchase_document_id Int       @id @default(autoincrement())
  store_id             Int?
  suplier_id           Int?
  document             document? @relation(fields: [document_id], references: [document_id], onDelete: NoAction, onUpdate: NoAction, map: "purchase_document_document_fk")
  employee             employee? @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "purchase_document_employee_fk")
  store                store?    @relation(fields: [store_id], references: [store_id], onDelete: NoAction, onUpdate: NoAction, map: "purchase_document_store_fk")
  supplier             supplier? @relation(fields: [suplier_id], references: [supplier_id], onDelete: NoAction, onUpdate: NoAction, map: "purchase_document_supplier_fk")
}

model quantity {
  sales_amount                         Int?
  total_amount                         Int?
  lot_id                               Int?
  quantity_id                          Int     @id @default(autoincrement())
  stock_id                             Int?
  lot                                  lot?    @relation(fields: [lot_id], references: [lot_id], onDelete: NoAction, onUpdate: NoAction, map: "quantity_lot_fk")
  stock_quantity_stock_idTostock       stock?  @relation("quantity_stock_idTostock", fields: [stock_id], references: [stock_id], onDelete: NoAction, onUpdate: NoAction, map: "quantity_stock_fk")
  stock_stock_quantity_id_fkToquantity stock[] @relation("stock_quantity_id_fkToquantity")
}

model revenue {
  revenue_id           Int             @id @default(autoincrement()) @map("revenue_pk")
  store_id_fk          Int?
  revenue_source_id_fk Int?
  order_id_fk          Int?
  cost_id_fk           Int?
  product_id_fk        Int?
  quantity             Int?
  total_amount         Decimal?        @db.Decimal(12, 2)
  net_profit           Float?          @db.Real
  date_received        DateTime?       @db.Date
  cost                 cost?           @relation(fields: [cost_id_fk], references: [cost_id], onDelete: NoAction, onUpdate: NoAction, map: "revenue_cost_fk")
  order                order?          @relation(fields: [order_id_fk], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "revenue_order_fk")
  product              product?        @relation(fields: [product_id_fk], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "revenue_product_fk")
  revenue_source       revenue_source? @relation(fields: [revenue_source_id_fk], references: [revenue_source_id], onDelete: NoAction, onUpdate: NoAction, map: "revenue_revenue_source_fk")
  store                store?          @relation(fields: [store_id_fk], references: [store_id], onDelete: NoAction, onUpdate: NoAction, map: "revenue_store_fk")
}

model revenue_source {
  source_name       String?   @db.VarChar
  description       String?   @db.VarChar
  revenue_source_id Int       @id @default(autoincrement())
  order             order[]
  revenue           revenue[]
}

model role {
  role_name     String?         @db.VarChar(20)
  role_id       Int             @id @default(autoincrement())
  employee      employee[]
  is_allowed    is_allowed[]
  is_pharmacist is_pharmacist[]
}

model stock {
  product_id_fk                           Int?
  quantity_id_fk                          Int?
  lot_id_fk                               Int?
  barcode                                 String?    @db.VarChar
  stock_id                                Int        @id @default(autoincrement())
  lot_lot_stock_idTostock                 lot[]      @relation("lot_stock_idTostock")
  quantity_quantity_stock_idTostock       quantity[] @relation("quantity_stock_idTostock")
  lot_stock_lot_id_fkTolot                lot?       @relation("stock_lot_id_fkTolot", fields: [lot_id_fk], references: [lot_id], onDelete: NoAction, onUpdate: NoAction, map: "stock_lot_fk")
  product                                 product?   @relation(fields: [product_id_fk], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "stock_product_fk")
  quantity_stock_quantity_id_fkToquantity quantity?  @relation("stock_quantity_id_fkToquantity", fields: [quantity_id_fk], references: [quantity_id], onDelete: NoAction, onUpdate: NoAction, map: "stock_quantity_fk")
}

model store {
  name              String?             @db.VarChar
  contact           String?             @db.VarChar
  address           String?             @db.VarChar
  logo              Bytes?
  tax_id            String?             @db.VarChar
  store_id          Int                 @id @default(autoincrement())
  cost              cost[]
  purchase_document purchase_document[]
  revenue           revenue[]
}

model supplier {
  name              String?             @db.VarChar
  tax_id            String?             @db.VarChar
  address           String?             @db.VarChar
  description       String?             @db.VarChar
  supplier_id       Int                 @id @default(autoincrement())
  purchase_document purchase_document[]
}

model time_period {
  start_date         DateTime?            @db.Date
  end_date           DateTime?            @db.Date
  label              String?              @db.VarChar
  time_period_id     Int                  @id @default(autoincrement())
  forecasted_product forecasted_product[]
  trend              trend[]
}

model trend {
  product_id_fk     Int?
  metric_id_fk      Int?
  time_id_fk        Int?
  percentage_change Decimal?     @db.Decimal(5, 2)
  trend_id          Int          @id @default(autoincrement())
  metrics           metrics?     @relation(fields: [metric_id_fk], references: [metrics_id], onDelete: NoAction, onUpdate: NoAction, map: "trend_metrics_fk")
  product           product?     @relation(fields: [product_id_fk], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "trend_product_fk")
  time_period       time_period? @relation(fields: [time_id_fk], references: [time_period_id], onDelete: NoAction, onUpdate: NoAction, map: "trend_time_period_fk")
}
